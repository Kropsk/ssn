// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Identity {
  uuid                        String           @id @unique @default(uuid())
  email                       String?          @unique
  password                    String?
  verified                    Boolean          @default(false)
  token                       String           @unique @default(uuid())
  usernames                   Username[]       @relation(name: "IdentityUsernames")
  primaryUsername             String           @unique
  invites                     Invite[]         @relation(name: "IdentityInvites")
  usedInvite                  Invite?          @relation(name: "IdentityUsedInvite")
  role                        Role             @default(USER)
  isBanned                    Boolean          @default(false)
  connections                 Connection[]
  passwordResetToken          String?
  passwordResetTokenCreatedAt DateTime?
  likedProfiles               ProfileLike[]
  createdAt                   DateTime         @default(now())
}

model Username {
  name          String    @id @unique
  owner         Identity  @relation(name: "IdentityUsernames", fields: [ownerId], references: [uuid])
  ownerId       String
  createdAt     DateTime  @default(now())
  firstJoin     DateTime?
  lastSeen      DateTime?
  playedSeconds Int @default(0)
  joinCount     Int @default(0)
  isOnline      Boolean   @default(false)
  badges        UsernameBadges[]
  profile       Profile?
  donations     Donation[]
}

model Invite {
  code     String    @id @unique
  owner    Identity  @relation(name: "IdentityInvites", fields: [ownerId], references: [uuid])
  ownerId  String
  usedBy   Identity? @relation(name: "IdentityUsedInvite", fields: [usedById], references: [uuid])
  usedById String?   @unique
}

model Badge {
  slug   String           @id @unique
  label  String
  owners UsernameBadges[]
}

model UsernameBadges {
  owner     Username @relation(fields: [ownerName], references: [name])
  ownerName String
  badge     Badge    @relation(fields: [badgeSlug], references: [slug])
  badgeSlug String
  createdAt DateTime @default(now())

  @@id([ownerName, badgeSlug])
}

model Profile {
  uuid        String   @id @unique @default(uuid())
  owner       Username @relation(fields: [ownerName], references: [name])
  ownerName   String   @unique
  aboutMe     String?
  showAlts    Boolean  @default(false)
  showSocials Boolean  @default(false)
  showOnline  Boolean  @default(false)
  likes       ProfileLike[]
}

model ProfileLike {
  id        Int      @id @default(autoincrement())
  liker     Identity @relation(fields: [likerId], references: [uuid])
  likerId   String
  profile   Profile  @relation(fields: [profileId], references: [uuid])
  profileId String
}

model Connection {
  id           String   @id @unique
  service      Service
  accessToken  String
  expiresAt    DateTime
  refreshToken String
  scope        String
  tokenType    String
  isPublic     Boolean @default(false)
  owner        Identity @relation(fields: [ownerId], references: [uuid])
  ownerId      String
}

model Donation {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  expiresAt DateTime
  amount    Int
  paymentId String
  gateway   PaymentGateway
  owner     Username @relation(fields: [ownerName], references: [name])
  ownerName String
}

model luckperms_user_permissions {
  id          Int       @id @default(autoincrement())
  uuid        String    @db.VarChar(36)
  permission  String    @db.VarChar(200)
  value       Boolean
  server      String    @db.VarChar(36)
  world       String    @db.VarChar(64)
  expiry      BigInt
  contexts    String    @db.VarChar(200)

  @@index([uuid], name: "luckperms_user_permissions_uuid")
}

model luckperms_group_permissions {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(36)
  permission  String    @db.VarChar(200)
  value       Boolean
  server      String    @db.VarChar(36)
  world       String    @db.VarChar(64)
  expiry      BigInt
  contexts    String    @db.VarChar(200)

  @@index([name], name: "luckperms_group_permissions_name")
}

model luckperms_players {
  uuid          String    @id @db.VarChar(36)
  username      String    @db.VarChar(16)
  primary_group String    @db.VarChar(36)

  @@index([username], name: "luckperms_players_username")
}

model luckperms_groups {
  name String @id @db.VarChar(36)
}

model luckperms_actions {
  id          Int       @id @default(autoincrement())
  time        BigInt
  actor_uuid  String    @db.VarChar(36)
  actor_name  String    @db.VarChar(100)
  type        String    @db.Char(1)
  acted_uuid  String    @db.VarChar(36)
  acted_name  String    @db.VarChar(36)
  action      String    @db.VarChar(300)
}

model luckperms_tracks {
  name   String  @id @db.VarChar(36)
  groups String  @db.Text
}

enum Role {
  USER
  ADMIN
}

enum Service {
  DISCORD
}

enum PaymentGateway {
  MERCADO_PAGO
}